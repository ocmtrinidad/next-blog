// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id            String      @id @default(cuid())
  name          String      @unique
  email         String      @unique
  emailVerified DateTime?
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  image         String?
  posts         Post[]
  bio           String?
  Like          Like[]
  Comment       Comment[]
  Follower      Following[] @relation("follower")
  Followed      Following[] @relation("followed")
}

model Post {
  id         String    @id @default(cuid())
  title      String
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  image      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  Like       Like[]
  Comment    Comment[]
}

model Category {
  id   String @id @default(cuid())
  name String @unique
  Post Post[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Following {
  id         String   @id @default(cuid())
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followed   User     @relation("followed", fields: [followedId], references: [id])
  followedId String
  createdAt  DateTime @default(now())
}
